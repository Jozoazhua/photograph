name: Build and Release

on:
  release:
    types: [created]

permissions:
  contents: write
  packages: write

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            artifact_name: downloader.exe
            asset_name: downloader-windows.exe
            icon_format: ico
          - os: macos-13
            artifact_name: downloader-intel.dmg
            asset_name: downloader-macos-intel.dmg
            icon_format: icns
            arch: intel
          - os: macos-latest
            artifact_name: downloader-arm64.dmg
            asset_name: downloader-macos-arm64.dmg
            icon_format: icns
            arch: arm64

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies (macOS)
        if: contains(matrix.os, 'macos')
        run: brew install imagemagick create-dmg

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt pyinstaller Pillow

      - name: Convert icon (macOS)
        if: contains(matrix.os, 'macos')
        run: |
          mkdir -p icon.iconset
          sips -z 16 16 icon.png --out icon.iconset/icon_16x16.png
          sips -z 32 32 icon.png --out icon.iconset/icon_16x16@2x.png
          sips -z 32 32 icon.png --out icon.iconset/icon_32x32.png
          sips -z 64 64 icon.png --out icon.iconset/icon_32x32@2x.png
          sips -z 128 128 icon.png --out icon.iconset/icon_128x128.png
          sips -z 256 256 icon.png --out icon.iconset/icon_128x128@2x.png
          sips -z 256 256 icon.png --out icon.iconset/icon_256x256.png
          sips -z 512 512 icon.png --out icon.iconset/icon_256x256@2x.png
          iconutil -c icns icon.iconset
          mv icon.icns icon_macos.icns

      - name: Build Executable (Windows)
        if: matrix.os == 'windows-latest'
        run: pyinstaller --onefile --windowed --icon=icon.png --name=downloader --distpath=dist photograph.py
        shell: cmd

      - name: Build Executable (macOS)
        if: contains(matrix.os, 'macos')
        run: |
          pyinstaller --onefile --windowed --icon=icon_macos.icns --name=downloader --distpath=dist photograph.py

      - name: Create DMG (macOS)
        if: contains(matrix.os, 'macos')
        run: |
          mkdir -p dist/downloader.app/Contents/{MacOS,Resources}
          mv dist/downloader dist/downloader.app/Contents/MacOS/
          cp icon_macos.icns dist/downloader.app/Contents/Resources/icon.icns
          cat > dist/downloader.app/Contents/Info.plist << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>CFBundleExecutable</key>
            <string>downloader</string>
            <key>CFBundleIdentifier</key>
            <string>com.example.downloader.${{ matrix.arch }}</string>
            <key>CFBundleName</key>
            <string>downloader</string>
            <key>CFBundleDisplayName</key>
            <string>downloader</string>
            <key>CFBundleVersion</key>
            <string>1.0</string>
            <key>CFBundleIconFile</key>
            <string>icon.icns</string>
            <key>CFBundlePackageType</key>
            <string>APPL</string>
            <key>LSRequiresNativeExecution</key>
            <true/>
          </dict>
          </plist>
          EOF
          chmod +x dist/downloader.app/Contents/MacOS/downloader
          create-dmg --volname "downloader-${{ matrix.arch }}" --volicon icon_macos.icns --window-pos 200 120 --window-size 600 400 --icon-size 100 --icon "downloader.app" 175 190 --hide-extension "downloader.app" --app-drop-link 425 190 dist/${{ matrix.artifact_name }} dist/downloader.app

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: dist/${{ matrix.artifact_name }}

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Create Release and Upload
        uses: softprops/action-gh-release@v1
        with:
          files: |
            dist/**/*.exe
            dist/**/*.dmg
          name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}